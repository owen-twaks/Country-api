import { GetStaticProps } from 'next';
import Head from 'next/head';
import Link from 'next/link';
import FilterSearch from '../components/FilterSearch';
import Navbar from '../components/Layout';
import SearchInput from '../components/SearchInput';
import Country, {ICountry} from '../components/Country';
import { useGlobalContext } from '../context/context';
import { sortArrayAlphabetically } from '../Utils/sortArrayAlphabetically';
import { removeParenthesisContentFromString } from '../Utils/removeParenthesisContentFromString';
import Layout from '../components/Layout';

interface HomeProps{
  countries: ICountry[];
}

export default function Home({countries}:HomeProps) {
	
  // Mapping through every country's region and using Set to avoid repetitions.
	
	const filteredRegions = Array.from(
		new Set(countries.map((country) => country.region))
	);


	// Removing invalid regions and sorting array alphabetically (undefined is used because this array doesn't have any properties since it's not an array of objects, but strings).
  
	const regions: string[] =
		sortArrayAlphabetically(
			filteredRegions.slice(0, filteredRegions.length - 2),
			undefined
		)


	//Using the information about the selected region and input value from the context to control what will be displayed.
	
	const {inputValue, selectedRegion} = useGlobalContext();


	// Filtering the countries based on the selected region (if any) and input value (if any). After that, sorting the resulting array based on the 'name' property inside of each country object. 
	
	const filteredCountries = 

		sortArrayAlphabetically(
			
			countries	
				.filter((country) => 
					(selectedRegion) ? 
					(country.region == selectedRegion) : (country)
				)
				
				.filter((country) =>
					country.name.toLowerCase().includes(inputValue.toLowerCase())
				),

			'name'
		);
	

	return (
		<>
			<Head>
				<title>World Countries | Home</title>
				<meta name='description' content='Generated by create next app' />
			</Head>

			<Layout>

				<div>

					{/* Input and Filter */}

					<section className='mx-8 lg:mx-16 lg:flex lg:justify-between'>
						<SearchInput />
						<FilterSearch regions={regions} />
					</section>

					{/* Countries Grid */}

					<section className='grid gap-y-12 m-12 sm:mx-8 sm:grid-cols-2 sm:gap-16 lg:grid-cols-3 lg:gap-20 lg:mx-16 dark:bg-veryDarkBlueBackground'>
						{filteredCountries.map((country) => {
							return (	
								<Country key={country.id} country={country} />
							)
						})}
					</section>
				</div>
			</Layout>
		</>
	);
}

export const getStaticProps: GetStaticProps = async () =>{

  const response = await fetch('https://restcountries.eu/rest/v2/all');
  const data = await response.json();

  const countries:ICountry[] = data.map((country) => {
		const {
			alpha3Code,
			capital,
			currencies,
			borders,
			flag,
			languages,
			name,
			nativeName,
			population,
			region,
			subregion,
			topLevelDomain,
		} = country;

		// Removing parenthesis, as well as the content limited by them.
		const countryName = removeParenthesisContentFromString(name);

		return {
			id: alpha3Code,
			name: countryName,
			nativeName,
			population,
			region,
			subRegion: subregion,
			capital,
			topLevelDomain,
			currencies,
			languages,
			borderCountries: borders,
			flag,
		};
	});

  return {
    props: {
      countries
    }
  }
}
